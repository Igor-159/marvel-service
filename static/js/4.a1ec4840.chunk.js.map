{"version":3,"sources":["components/charSearchForm/CharSearchForm.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["CharSearchForm","useState","char","setChar","useMarvelService","loading","error","getCharacterByName","clearError","onCharLoaded","errorMessage","className","ErrorMessage","results","length","name","to","id","initialValues","charName","validationSchema","Yup","required","onSubmit","then","htmlFor","type","placeholder","disabled","component","Skeleton","setContent","process","Component","data","Spinner","Error","View","description","thumbnail","homepage","wiki","imgStyle","src","alt","style","href","RandomChar","getCharacter","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","Math","floor","random","onClick","mjolnir","newItemLoading","CharList","props","charList","setCharList","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","items","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","comics","CharInfo","charId","ErrorBoundary","state","errorInfo","this","setState","children","MainPage","selectedChar","decoration","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/4.a1ec4840.chunk.js","sourcesContent":["import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process){\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data = {data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","\n\nimport {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError, process,setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    \n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View , char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;\n\n\n\n\n\n\n\n","import { useState, useEffect, useRef } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\n\n\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process){\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component />;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\n\n\n\n\n\n\nconst CharList = (props) =>  {\n   \n   const [charList, setCharList] = useState([]);\n   const [newItemLoading, setNewItemLoading] = useState(false);\n   const [offset, setOffset] = useState(210);\n   const [charEnded, setCharEnded] = useState(false);\n    \n    \n    const {loading, error, getAllCharacters, process, setProcess} = useMarvelService();\n\n\n\n    useEffect(() =>{\n        onRequest(offset, true);\n    }, [])\n\n\n\n    const onRequest = (offset, initial) =>{\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n            \n    }\n   \n\n    const onCharListLoaded = (newCharList) =>{\n        let ended  = false;\n        if(newCharList.length < 9){\n            ended = true;\n        }\n\n\n       \n\n        setCharList(charList =>[...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset+9);\n        setCharEnded(charEnded => ended);\n    }\n\n    \n\n    \n\n\n    const itemRefs = useRef ([]);\n\n   \n\n\n    const focusOnItem = (id) =>{\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr){\n        const items = arr.map((item, i) =>{\n            let imgStyle = {'objectFit':'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n                imgStyle = {'objectFit':'unset'};\n            }\n\n            return(\n                <li \n                    className = 'char__item'\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key = {item.id}\n                    onClick={()=>{\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e)=> {\n                        if (e.key === ' ' ||e.key ==='Enter'){\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}\n                    \n                    \n                    \n                    > \n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className='char__name'>{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className='char__grid'>\n                {items}\n            </ul>\n        )\n\n\n    }\n\n        \n\n        return (\n            <div className=\"char__list\">\n                {setContent(process, () => renderItems(charList), newItemLoading )} \n                <button \n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display': charEnded ? 'none': 'block'}}\n                    onClick={() =>onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n  \n\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\n\nconst CharInfo = (props)=>{\n\n    const [char, setChar] = useState(null);\n    \n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n    \n\n\n    useEffect(() =>{\n        updateChar()\n        \n    },[props.charId])\n\n    \n\n    const updateChar = () =>{\n        const{charId} = props;\n        if(!charId){\n            return;\n        }\n        \n\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    \n     const onCharLoaded = (char) =>{\n         setChar(char);  \n    }\n\n    \n    \n\n\n        // const skeleton = char || loading || error ?null : <Skeleton/>\n        // const errorMessage = error ? <ErrorMessage/> : null;\n        // const spinner = loading ? <Spinner/> : null;\n        // const content = !(loading || error || !char) ? <View char = {char}/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {setContent(process, View, char)}\n            </div>\n        )\n    \n\n}\n\nconst View = ({data}) =>{\n        const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n        let imgStyle = {'objectFit':'cover'}\n        if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n        imgStyle = {'objectFit':'contain'};\n    }\n\n        return (\n            <>\n            <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} style={imgStyle}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                   {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length >0 ?null : 'There is no comics with  this character'}\n                    {\n                        comics.map((item, i) =>{\n                            if(i>9) return ;\n                            return(\n                                <li key={i} className=\"char__comics-item\">\n                                      {item.name}\n                                </li>\n                            )\n                        })\n                    }\n\n                    \n                    \n                </ul>\n            </>\n        )\n}\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n    state={\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo){\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        if(this.state.error){\r\n            return<ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\n\r\nconst MainPage = () =>{\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) =>{\r\n        setChar(id);\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n        <ErrorBoundary>\r\n            <RandomChar/> \r\n        </ErrorBoundary>\r\n        <div className=\"char__content\">\r\n            <ErrorBoundary>\r\n                <CharList onCharSelected={onCharSelected}/>\r\n            </ErrorBoundary>    \r\n            <div>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n\r\n                \r\n                <ErrorBoundary>\r\n                    <CharSearchForm/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () =>{\r\n    return (\r\n        <img style = {{display: 'block', width: '250 px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src = {img}\r\n        alt='Error' />\r\n    )\r\n}\r\n\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n\r\n\r\n    const _apiBase  = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=48ae8219bf78404dac3cb3365c964720';\r\n    const _baseOffset = 210;\r\n\r\n    \r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) =>{\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n    \r\n\r\n    const getCharacter = async (id) =>{\r\n        const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) =>{\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n       }\r\n    \r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n\r\n    const _transformCharacter = (char) =>{\r\n        return{\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` :'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n\r\n    \r\n        return { getCharacterByName,\r\n                 loading, \r\n                 error, \r\n                 process,\r\n                 setProcess,\r\n                 clearError, \r\n                 getAllCharacters, \r\n                 getCharacter, \r\n                 getAllComics, \r\n                 getComic}\r\n}\r\n\r\n\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from \"react\";\r\n\r\nexport const useHttp = () =>{\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback (async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if(!response.ok){\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading (false);\r\n            return data;\r\n        }catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n   const clearError = useCallback(() => {\r\n       setError(null);\r\n       setProcess('loading');\r\n    }, []);\r\n   return {loading, request, error, clearError, process, setProcess}\r\n}"],"sourceRoot":""}